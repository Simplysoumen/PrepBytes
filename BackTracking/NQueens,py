def isValid(board,row,col,n):
    #row
    for i in range(col):
        if(board[row][i]==1):
            return False

    # upper diagonal
    for i,j in zip(range(row,-1,-1), range(col,-1,-1)):
        if(board[i][j]==1):
            return False

    #lower diagonal
    for i,j in zip(range(row,n), range(col,-1,-1)):
        if(board[i][j]==1):
            return False

    return True

def nQueen(board,n,col):
    if(col>=n):
        return True

    for i in range(n):
        if(isValid(board,i,col,n)):
            board[i][col] = 1
            if(nQueen(board,n,col+1) is True):
                return True
            board[i][col] = 0

    return False

def main():
    n = int(input())
    board = [[0 for _ in range(n)] for _ in range(n)]
    if(nQueen(board,n,0) is False):
        print("Solution does not exist")
    else:
        for i in range(n):
            for j in range(n):
                print(board[i][j],end = " ")
            print()

if __name__ == '__main__':
    main()
